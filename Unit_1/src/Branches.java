/**
 * "1. Basics of software code development". Ветвления.
 *
 * Данный класс включает в себя методы, реализующие решения задач из пункта "Ветвления".
 * Название метода совпадает с номером задачи (task_1 для 1ой задачи, task_2 для 2ой и т.д.).
 * Во время решения не используются конструкции циклов, а так же обработчики исключений и другие конструкции.
 * В методе main реализуем вызовы методов с печатью результата в консоль.
 *
 * @author Пригоряну Виктор.
 */

public class Branches {

    /**
     * 1. "Даны два угла треугольника (в градусах). Определить, существует ли такой треугольник, и если да, то будет ли
     * он прямоугольным."
     *
     * Треугольник существует, если сумма двух углов меньше 180 градусов
     * Он прямоугольный, если хотя бы один угол равен 90 градусов
     * Для сравнения двух вещественных чисел используем малое Эпсилон, и сравним модуль разности этих чисел с ним.
     */
    public static String task_1(double alpha, double beta) {
        // Зададим необходимую точность для сравнения
        double eps = 0.0001;
        String result = "";
        if (alpha + beta < 180) {
            result += "Такой треугольник существует. ";
            if ((Math.abs(90 - alpha) <= eps) || (Math.abs(90 - beta) <= eps) || (Math.abs(alpha + beta - 90) <= eps)) {
                result += "Он прямоугольный.";
            }
            else {
                result += "Он не прямоугольный";
            }
        }
        else {
            result += "Такого треугольника не существует.";
        }
        return result;
    }

    /**
     * "2. Найти max{min(a, b), min(c, d)}."
     *
     * Данное решение принимает и возвращает целые числа.
     * В решении не используются допонительные переменные.
     */
    public static int task_2(int a, int b, int c, int d) {
        if (a < b) {
            b = a;
        }
        if (c < d) {
            d = c;
        }
        if (b > d) {
            d = b;
        }
        return d;
    }

    /**
     * "3. Даны три точки А(х1,у1), В(х2,у2) и С(х3,у3). Определить, будут ли они расположены на одной прямой."
     *
     * По двум точкам можно составить уравнение прямой. Если третья точка не нарушает равенство, она лежит на прямой.
     * Решение возвращает true, если три точки расположены на одной прямой, и false - если не расположены.
     * Для сравнения двух вещественных чисел используем малое Эпсилон, и сравним модуль разности этих чисел с ним.
     * Однако, это решение не будет работать с прямыми вида x = k или у = k
     * Если х1 = х2 = х3 или y1 = y2 = y3, точки так же лежат на одной прямой
     */
    public static boolean task_3(double x1, double y1, double x2, double y2, double x3, double y3) {
        // Зададим необходимую точность для сравнения
        double eps = 0.000001;
        // Проверим на равенство х1 = х2 = х3 или y1 = y2 = y3 с использование Эпсилон
        if (((Math.abs(x1 - x2) <= eps) && (Math.abs(x2 - x3) <= eps)) ||
                ((Math.abs(y1 - y2) <= eps) && (Math.abs(y2 - y3) <= eps))) {
            return true;
        }
        /* (x - x1) / (x2 - x1) == (y - y1) / (y2 - y1)) - уравнение прямой, подставим в него 3ью точку
        и сравним модуль разности с Эпсилон */
        else {
            return (Math.abs(((x3 - x1) / (x2 - x1)) - ((y3 - y1) / (y2 - y1))) <= eps);
        }
    }

    /**
     * "4. Заданы размеры А, В прямоугольного отверстия и размеры х, у, z кирпича. Определить, пройдет ли кирпич через
     * отверстие."
     *
     * Для того, чтобы кирпич вошел в отверстие, 2 стороны отверстия должны быть больше двух минимальных сторон кирпича
     */
    public static boolean task_4(double A, double B, double x, double y, double z) {
        return ((A > x) && (B > y)) || ((A > y) & (B > x))
                || ((A > x) & (B > z)) || ((A > z) & (B > x))
                || ((A > y) & (B > z)) || ((A > z) & (B > y));
    }

    /**
     * 5. "Вычислить значение функции: x^2-3x+9 при x <= 3, 1/(x^3 + 6) при  x > 3."
     *
     * Для вычисления степени используется Math.pow
     */
    public static double task_5 (double x) {
        if (x <= 3) {
            return Math.pow(x, 2) - 3 * x + 9;
        }
        else {
            return 1 / (Math.pow(x, 3) + 6);
        }
    }

    /**
     * дописать про метод main :)
     * @param args
     */
    public static void main(String[] args) {
        System.out.println("Task_1:");
        System.out.println(task_1(42.5, 82.5));                           // Не прямоугольный
        System.out.println(task_1(90, 82));                               // Прямоугольный
        System.out.println(task_1(92, 92));                               // Не существует
        System.out.println(task_1(40, 50));                               // Прямоугольный
        System.out.println("\nTask_2:");
        System.out.println(task_2(4,5,3,2));                             // 4
        System.out.println(task_2(1,2,3,4));                             // 3
        System.out.println("\nTask_3:");
        System.out.println(task_3(0, -1.5, 1, -3, 2, -4.5));   // true
        System.out.println(task_3(0,3,0,5,0,10));              // true
        System.out.println(task_3(1,3,2,3,15,3));              // true
        System.out.println(task_3(0, -1, 2, -6, 4, -12));      // false
        System.out.println("\nTask_4:");
        System.out.println(task_4(10,15,12,18,8));                    // true
        System.out.println(task_4(5,6,12,3,6));                       // false
        System.out.println("\nTask_5:");
        System.out.println(task_5(-3));                                           // 27.0
        System.out.println(task_5(3));                                            // 9.0
        System.out.println(task_5(5));                                            // 0.007633587786259542
    }
}
